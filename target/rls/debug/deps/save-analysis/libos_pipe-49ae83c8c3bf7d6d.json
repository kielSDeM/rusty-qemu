{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2","program":"/home/zero/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","os_pipe","--edition=2018","/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","--json=diagnostic-rendered-ansi,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=49ae83c8c3bf7d6d","-C","extra-filename=-49ae83c8c3bf7d6d","--out-dir","/home/zero/rusty-qemu/target/rls/debug/deps","-L","dependency=/home/zero/rusty-qemu/target/rls/debug/deps","--extern","libc=/home/zero/rusty-qemu/target/rls/debug/deps/liblibc-a7e685275f50120b.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/zero/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/zero/rusty-qemu/target/rls/debug/deps/libos_pipe-49ae83c8c3bf7d6d.rmeta"},"prelude":{"crate_id":{"name":"os_pipe","disambiguator":[13446734851662561270,0]},"crate_root":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src","external_crates":[{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[14026078687029744792,0]}},{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[5443730852259234579,0]}},{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[4162025702538114948,0]}},{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[17612152343462746361,0]}},{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[5560808256873132085,0]}},{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[135160560163186024,0]}},{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[5800521777261530329,0]}},{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[7095478770525139037,0]}},{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[17225897750877482818,0]}},{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[15613653607383163471,0]}},{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[12428323400248712701,0]}},{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","num":12,"id":{"name":"std_detect","disambiguator":[11893279639181573711,0]}},{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","num":13,"id":{"name":"addr2line","disambiguator":[13583305032161054644,0]}},{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","num":14,"id":{"name":"gimli","disambiguator":[16609837797022023111,0]}},{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","num":15,"id":{"name":"object","disambiguator":[18098459435141129808,0]}},{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","num":16,"id":{"name":"memchr","disambiguator":[15244551393771456017,0]}},{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","num":17,"id":{"name":"miniz_oxide","disambiguator":[6576340271055396708,0]}},{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","num":18,"id":{"name":"adler","disambiguator":[15284510821186066958,0]}},{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","num":19,"id":{"name":"panic_unwind","disambiguator":[12982807908830018159,0]}},{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/unix.rs","num":20,"id":{"name":"libc","disambiguator":[13920019991338088576,0]}}],"span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":0,"byte_end":16324,"line_start":1,"line_end":440,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":0,"byte_end":16324,"line_start":1,"line_end":440,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":6},{"krate":0,"index":9},{"krate":0,"index":74},{"krate":0,"index":77},{"krate":0,"index":12},{"krate":0,"index":14},{"krate":0,"index":16},{"krate":0,"index":19},{"krate":0,"index":79},{"krate":0,"index":82},{"krate":0,"index":21},{"krate":0,"index":23},{"krate":0,"index":26},{"krate":0,"index":30},{"krate":0,"index":32},{"krate":0,"index":33},{"krate":0,"index":34},{"krate":0,"index":35},{"krate":0,"index":36}],"decl_id":null,"docs":" A cross-platform library for opening OS pipes.","sig":null,"attributes":[{"value":"/ A cross-platform library for opening OS pipes.","span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":0,"byte_end":50,"line_start":1,"line_end":1,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":51,"byte_end":54,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ The standard library uses pipes to read output from child processes,","span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":55,"byte_end":127,"line_start":3,"line_end":3,"column_start":1,"column_end":73}},{"value":"/ but it doesn't expose a way to create them directly. This crate","span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":128,"byte_end":195,"line_start":4,"line_end":4,"column_start":1,"column_end":68}},{"value":"/ fills that gap with the `pipe` function. It also includes some","span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":196,"byte_end":262,"line_start":5,"line_end":5,"column_start":1,"column_end":67}},{"value":"/ helpers for passing pipes to the `std::process::Command` API.","span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":263,"byte_end":328,"line_start":6,"line_end":6,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":329,"byte_end":332,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ - [Docs](https://docs.rs/os_pipe)","span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":333,"byte_end":370,"line_start":8,"line_end":8,"column_start":1,"column_end":38}},{"value":"/ - [Crate](https://crates.io/crates/os_pipe)","span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":371,"byte_end":418,"line_start":9,"line_end":9,"column_start":1,"column_end":48}},{"value":"/ - [Repo](https://github.com/oconnor663/os_pipe.rs)","span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":419,"byte_end":473,"line_start":10,"line_end":10,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":474,"byte_end":477,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ Usage note: The main purpose of `os_pipe` is to support the","span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":478,"byte_end":541,"line_start":12,"line_end":12,"column_start":1,"column_end":64}},{"value":"/ higher-level [`duct`](https://github.com/oconnor663/duct.rs)","span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":542,"byte_end":606,"line_start":13,"line_end":13,"column_start":1,"column_end":65}},{"value":"/ library, which handles most of the same use cases with much less","span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":607,"byte_end":675,"line_start":14,"line_end":14,"column_start":1,"column_end":69}},{"value":"/ code and no risk of deadlocks. `duct` can run the entire example","span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":676,"byte_end":744,"line_start":15,"line_end":15,"column_start":1,"column_end":69}},{"value":"/ below in one line of code.","span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":745,"byte_end":775,"line_start":16,"line_end":16,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":776,"byte_end":779,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":780,"byte_end":793,"line_start":18,"line_end":18,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":794,"byte_end":797,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ Join the stdout and stderr of a child process into a single stream,","span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":798,"byte_end":869,"line_start":20,"line_end":20,"column_start":1,"column_end":72}},{"value":"/ and read it. To do that we open a pipe, duplicate its write end, and","span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":870,"byte_end":942,"line_start":21,"line_end":21,"column_start":1,"column_end":73}},{"value":"/ pass those writers as the child's stdout and stderr. Then we can","span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":943,"byte_end":1011,"line_start":22,"line_end":22,"column_start":1,"column_end":69}},{"value":"/ read combined output from the read end of the pipe. We have to be","span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":1012,"byte_end":1081,"line_start":23,"line_end":23,"column_start":1,"column_end":70}},{"value":"/ careful to close the write ends first though, or reading will block","span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":1082,"byte_end":1153,"line_start":24,"line_end":24,"column_start":1,"column_end":72}},{"value":"/ waiting for EOF.","span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":1154,"byte_end":1174,"line_start":25,"line_end":25,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":1175,"byte_end":1178,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":1179,"byte_end":1190,"line_start":27,"line_end":27,"column_start":1,"column_end":12}},{"value":"/ use os_pipe::pipe;","span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":1191,"byte_end":1213,"line_start":28,"line_end":28,"column_start":1,"column_end":23}},{"value":"/ use std::io::prelude::*;","span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":1214,"byte_end":1242,"line_start":29,"line_end":29,"column_start":1,"column_end":29}},{"value":"/ use std::process::{Command, Stdio};","span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":1243,"byte_end":1282,"line_start":30,"line_end":30,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":1283,"byte_end":1286,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ // This command prints \"foo\" to stdout and \"bar\" to stderr. It","span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":1287,"byte_end":1353,"line_start":32,"line_end":32,"column_start":1,"column_end":67}},{"value":"/ // works on both Unix and Windows, though there are whitespace","span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":1354,"byte_end":1420,"line_start":33,"line_end":33,"column_start":1,"column_end":67}},{"value":"/ // differences that we'll account for at the bottom.","span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":1421,"byte_end":1477,"line_start":34,"line_end":34,"column_start":1,"column_end":57}},{"value":"/ let shell_command = \"echo foo && echo bar >&2\";","span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":1478,"byte_end":1529,"line_start":35,"line_end":35,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":1530,"byte_end":1533,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ // Ritual magic to run shell commands on different platforms.","span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":1534,"byte_end":1599,"line_start":37,"line_end":37,"column_start":1,"column_end":66}},{"value":"/ let (shell, flag) = if cfg!(windows) { (\"cmd.exe\", \"/C\") } else { (\"sh\", \"-c\") };","span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":1600,"byte_end":1685,"line_start":38,"line_end":38,"column_start":1,"column_end":86}},{"value":"/","span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":1686,"byte_end":1689,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ let mut child = Command::new(shell);","span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":1690,"byte_end":1730,"line_start":40,"line_end":40,"column_start":1,"column_end":41}},{"value":"/ child.arg(flag);","span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":1731,"byte_end":1751,"line_start":41,"line_end":41,"column_start":1,"column_end":21}},{"value":"/ child.arg(shell_command);","span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":1752,"byte_end":1781,"line_start":42,"line_end":42,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":1782,"byte_end":1785,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ // Here's the interesting part. Open a pipe, copy its write end, and","span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":1786,"byte_end":1858,"line_start":44,"line_end":44,"column_start":1,"column_end":73}},{"value":"/ // give both copies to the child.","span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":1859,"byte_end":1896,"line_start":45,"line_end":45,"column_start":1,"column_end":38}},{"value":"/ let (mut reader, writer) = pipe().unwrap();","span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":1897,"byte_end":1944,"line_start":46,"line_end":46,"column_start":1,"column_end":48}},{"value":"/ let writer_clone = writer.try_clone().unwrap();","span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":1945,"byte_end":1996,"line_start":47,"line_end":47,"column_start":1,"column_end":52}},{"value":"/ child.stdout(writer);","span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":1997,"byte_end":2022,"line_start":48,"line_end":48,"column_start":1,"column_end":26}},{"value":"/ child.stderr(writer_clone);","span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":2023,"byte_end":2054,"line_start":49,"line_end":49,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":2055,"byte_end":2058,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ // Now start the child running.","span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":2059,"byte_end":2094,"line_start":51,"line_end":51,"column_start":1,"column_end":36}},{"value":"/ let mut handle = child.spawn().unwrap();","span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":2095,"byte_end":2139,"line_start":52,"line_end":52,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":2140,"byte_end":2143,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ // Very important when using pipes: This parent process is still","span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":2144,"byte_end":2212,"line_start":54,"line_end":54,"column_start":1,"column_end":69}},{"value":"/ // holding its copies of the write ends, and we have to close them","span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":2213,"byte_end":2283,"line_start":55,"line_end":55,"column_start":1,"column_end":71}},{"value":"/ // before we read, otherwise the read end will never report EOF. The","span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":2284,"byte_end":2356,"line_start":56,"line_end":56,"column_start":1,"column_end":73}},{"value":"/ // Command object owns the writers now, and dropping it closes them.","span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":2357,"byte_end":2429,"line_start":57,"line_end":57,"column_start":1,"column_end":73}},{"value":"/ drop(child);","span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":2430,"byte_end":2446,"line_start":58,"line_end":58,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":2447,"byte_end":2450,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ // Finally we can read all the output and clean up the child.","span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":2451,"byte_end":2516,"line_start":60,"line_end":60,"column_start":1,"column_end":66}},{"value":"/ let mut output = String::new();","span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":2517,"byte_end":2552,"line_start":61,"line_end":61,"column_start":1,"column_end":36}},{"value":"/ reader.read_to_string(&mut output).unwrap();","span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":2553,"byte_end":2601,"line_start":62,"line_end":62,"column_start":1,"column_end":49}},{"value":"/ handle.wait().unwrap();","span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":2602,"byte_end":2629,"line_start":63,"line_end":63,"column_start":1,"column_end":28}},{"value":"/ assert!(output.split_whitespace().eq(vec![\"foo\", \"bar\"]));","span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":2630,"byte_end":2692,"line_start":64,"line_end":64,"column_start":1,"column_end":63}},{"value":"/ ```","span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":2693,"byte_end":2700,"line_start":65,"line_end":65,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":74},"span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":3011,"byte_end":3021,"line_start":76,"line_end":76,"column_start":12,"column_end":22},"name":"PipeReader","qualname":"::PipeReader","value":"","parent":null,"children":[],"decl_id":null,"docs":" The reading end of a pipe, returned by [`pipe`](fn.pipe.html).","sig":null,"attributes":[{"value":"/ The reading end of a pipe, returned by [`pipe`](fn.pipe.html).","span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":2760,"byte_end":2826,"line_start":71,"line_end":71,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":2827,"byte_end":2830,"line_start":72,"line_end":72,"column_start":1,"column_end":4}},{"value":"/ `PipeReader` implements `Into<Stdio>`, so you can pass it as an argument to","span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":2831,"byte_end":2910,"line_start":73,"line_end":73,"column_start":1,"column_end":80}},{"value":"/ `Command::stdin` to spawn a child process that reads from the pipe.","span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":2911,"byte_end":2982,"line_start":74,"line_end":74,"column_start":1,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":13},"span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":3059,"byte_end":3068,"line_start":79,"line_end":79,"column_start":12,"column_end":21},"name":"try_clone","qualname":"<PipeReader>::try_clone","value":"pub fn try_clone(&Self) -> io::Result<PipeReader>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":79},"span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":3946,"byte_end":3956,"line_start":111,"line_end":111,"column_start":12,"column_end":22},"name":"PipeWriter","qualname":"::PipeWriter","value":"","parent":null,"children":[],"decl_id":null,"docs":" The writing end of a pipe, returned by [`pipe`](fn.pipe.html).","sig":null,"attributes":[{"value":"/ The writing end of a pipe, returned by [`pipe`](fn.pipe.html).","span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":3670,"byte_end":3736,"line_start":105,"line_end":105,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":3737,"byte_end":3740,"line_start":106,"line_end":106,"column_start":1,"column_end":4}},{"value":"/ `PipeWriter` implements `Into<Stdio>`, so you can pass it as an argument to","span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":3741,"byte_end":3820,"line_start":107,"line_end":107,"column_start":1,"column_end":80}},{"value":"/ `Command::stdout` or `Command::stderr` to spawn a child process that writes","span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":3821,"byte_end":3900,"line_start":108,"line_end":108,"column_start":1,"column_end":80}},{"value":"/ to the pipe.","span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":3901,"byte_end":3917,"line_start":109,"line_end":109,"column_start":1,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":22},"span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":3994,"byte_end":4003,"line_start":114,"line_end":114,"column_start":12,"column_end":21},"name":"try_clone","qualname":"<PipeWriter>::try_clone","value":"pub fn try_clone(&Self) -> io::Result<PipeWriter>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":32},"span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":5270,"byte_end":5274,"line_start":159,"line_end":159,"column_start":8,"column_end":12},"name":"pipe","qualname":"::pipe","value":"pub fn pipe() -> io::Result<(PipeReader, PipeWriter)>","parent":null,"children":[],"decl_id":null,"docs":" Open a new pipe and return a [`PipeReader`] and [`PipeWriter`] pair.","sig":null,"attributes":[{"value":"/ Open a new pipe and return a [`PipeReader`] and [`PipeWriter`] pair.","span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":4789,"byte_end":4861,"line_start":149,"line_end":149,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":4862,"byte_end":4865,"line_start":150,"line_end":150,"column_start":1,"column_end":4}},{"value":"/ This corresponds to the `pipe2` library call on Posix and the","span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":4866,"byte_end":4931,"line_start":151,"line_end":151,"column_start":1,"column_end":66}},{"value":"/ `CreatePipe` library call on Windows (though these implementation","span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":4932,"byte_end":5001,"line_start":152,"line_end":152,"column_start":1,"column_end":70}},{"value":"/ details might change). Pipes are non-inheritable, so new child","span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":5002,"byte_end":5068,"line_start":153,"line_end":153,"column_start":1,"column_end":67}},{"value":"/ processes won't receive a copy of them unless they're explicitly","span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":5069,"byte_end":5137,"line_start":154,"line_end":154,"column_start":1,"column_end":69}},{"value":"/ passed as stdin/stdout/stderr.","span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":5138,"byte_end":5172,"line_start":155,"line_end":155,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":5173,"byte_end":5176,"line_start":156,"line_end":156,"column_start":1,"column_end":4}},{"value":"/ [`PipeReader`]: struct.PipeReader.html","span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":5177,"byte_end":5219,"line_start":157,"line_end":157,"column_start":1,"column_end":43}},{"value":"/ [`PipeWriter`]: struct.PipeWriter.html","span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":5220,"byte_end":5262,"line_start":158,"line_end":158,"column_start":1,"column_end":43}}]},{"kind":"Function","id":{"krate":0,"index":33},"span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":6176,"byte_end":6185,"line_start":177,"line_end":177,"column_start":8,"column_end":17},"name":"dup_stdin","qualname":"::dup_stdin","value":"pub fn dup_stdin() -> io::Result<PipeReader>","parent":null,"children":[],"decl_id":null,"docs":" Get a duplicated copy of the current process's standard input, as a\n [`PipeReader`].","sig":null,"attributes":[{"value":"/ Get a duplicated copy of the current process's standard input, as a","span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":5338,"byte_end":5409,"line_start":163,"line_end":163,"column_start":1,"column_end":72}},{"value":"/ [`PipeReader`].","span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":5410,"byte_end":5429,"line_start":164,"line_end":164,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":5430,"byte_end":5433,"line_start":165,"line_end":165,"column_start":1,"column_end":4}},{"value":"/ Reading directly from this pipe isn't recommended, because it's not","span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":5434,"byte_end":5505,"line_start":166,"line_end":166,"column_start":1,"column_end":72}},{"value":"/ synchronized with [`std::io::stdin`]. [`PipeReader`] implements","span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":5506,"byte_end":5573,"line_start":167,"line_end":167,"column_start":1,"column_end":68}},{"value":"/ [`Into<Stdio>`], so it can be passed directly to [`Command::stdin`]. This is","span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":5574,"byte_end":5654,"line_start":168,"line_end":168,"column_start":1,"column_end":81}},{"value":"/ equivalent to [`Stdio::inherit`], though, so it's usually not necessary","span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":5655,"byte_end":5730,"line_start":169,"line_end":169,"column_start":1,"column_end":76}},{"value":"/ unless you need a collection of different pipes.","span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":5731,"byte_end":5783,"line_start":170,"line_end":170,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":5784,"byte_end":5787,"line_start":171,"line_end":171,"column_start":1,"column_end":4}},{"value":"/ [`std::io::stdin`]: https://doc.rust-lang.org/std/io/fn.stdin.html","span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":5788,"byte_end":5858,"line_start":172,"line_end":172,"column_start":1,"column_end":71}},{"value":"/ [`PipeReader`]: struct.PipeReader.html","span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":5859,"byte_end":5901,"line_start":173,"line_end":173,"column_start":1,"column_end":43}},{"value":"/ [`Into<Stdio>`]: https://doc.rust-lang.org/std/process/struct.Stdio.html","span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":5902,"byte_end":5978,"line_start":174,"line_end":174,"column_start":1,"column_end":77}},{"value":"/ [`Command::stdin`]: https://doc.rust-lang.org/std/process/struct.Command.html#method.stdin","span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":5979,"byte_end":6073,"line_start":175,"line_end":175,"column_start":1,"column_end":95}},{"value":"/ [`Stdio::inherit`]: https://doc.rust-lang.org/std/process/struct.Stdio.html#method.inherit","span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":6074,"byte_end":6168,"line_start":176,"line_end":176,"column_start":1,"column_end":95}}]},{"kind":"Function","id":{"krate":0,"index":34},"span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":7200,"byte_end":7210,"line_start":196,"line_end":196,"column_start":8,"column_end":18},"name":"dup_stdout","qualname":"::dup_stdout","value":"pub fn dup_stdout() -> io::Result<PipeWriter>","parent":null,"children":[],"decl_id":null,"docs":" Get a duplicated copy of the current process's standard output, as a\n [`PipeWriter`](struct.PipeWriter.html).","sig":null,"attributes":[{"value":"/ Get a duplicated copy of the current process's standard output, as a","span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":6262,"byte_end":6334,"line_start":181,"line_end":181,"column_start":1,"column_end":73}},{"value":"/ [`PipeWriter`](struct.PipeWriter.html).","span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":6335,"byte_end":6378,"line_start":182,"line_end":182,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":6379,"byte_end":6382,"line_start":183,"line_end":183,"column_start":1,"column_end":4}},{"value":"/ Writing directly to this pipe isn't recommended, because it's not","span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":6383,"byte_end":6452,"line_start":184,"line_end":184,"column_start":1,"column_end":70}},{"value":"/ synchronized with [`std::io::stdout`]. [`PipeWriter`] implements","span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":6453,"byte_end":6521,"line_start":185,"line_end":185,"column_start":1,"column_end":69}},{"value":"/ [`Into<Stdio>`], so it can be passed directly to [`Command::stdout`] or","span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":6522,"byte_end":6597,"line_start":186,"line_end":186,"column_start":1,"column_end":76}},{"value":"/ [`Command::stderr`]. This can be useful if you want the child's stderr to go","span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":6598,"byte_end":6678,"line_start":187,"line_end":187,"column_start":1,"column_end":81}},{"value":"/ to the parent's stdout.","span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":6679,"byte_end":6706,"line_start":188,"line_end":188,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":6707,"byte_end":6710,"line_start":189,"line_end":189,"column_start":1,"column_end":4}},{"value":"/ [`std::io::stdout`]: https://doc.rust-lang.org/std/io/fn.stdout.html","span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":6711,"byte_end":6783,"line_start":190,"line_end":190,"column_start":1,"column_end":73}},{"value":"/ [`PipeWriter`]: struct.PipeWriter.html","span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":6784,"byte_end":6826,"line_start":191,"line_end":191,"column_start":1,"column_end":43}},{"value":"/ [`Into<Stdio>`]: https://doc.rust-lang.org/std/process/struct.Stdio.html","span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":6827,"byte_end":6903,"line_start":192,"line_end":192,"column_start":1,"column_end":77}},{"value":"/ [`Command::stdout`]: https://doc.rust-lang.org/std/process/struct.Command.html#method.stdout","span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":6904,"byte_end":7000,"line_start":193,"line_end":193,"column_start":1,"column_end":97}},{"value":"/ [`Command::stderr`]: https://doc.rust-lang.org/std/process/struct.Command.html#method.stderr","span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":7001,"byte_end":7097,"line_start":194,"line_end":194,"column_start":1,"column_end":97}},{"value":"/ [`Stdio::inherit`]: https://doc.rust-lang.org/std/process/struct.Stdio.html#method.inherit","span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":7098,"byte_end":7192,"line_start":195,"line_end":195,"column_start":1,"column_end":95}}]},{"kind":"Function","id":{"krate":0,"index":35},"span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":8225,"byte_end":8235,"line_start":215,"line_end":215,"column_start":8,"column_end":18},"name":"dup_stderr","qualname":"::dup_stderr","value":"pub fn dup_stderr() -> io::Result<PipeWriter>","parent":null,"children":[],"decl_id":null,"docs":" Get a duplicated copy of the current process's standard error, as a\n [`PipeWriter`](struct.PipeWriter.html).","sig":null,"attributes":[{"value":"/ Get a duplicated copy of the current process's standard error, as a","span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":7288,"byte_end":7359,"line_start":200,"line_end":200,"column_start":1,"column_end":72}},{"value":"/ [`PipeWriter`](struct.PipeWriter.html).","span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":7360,"byte_end":7403,"line_start":201,"line_end":201,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":7404,"byte_end":7407,"line_start":202,"line_end":202,"column_start":1,"column_end":4}},{"value":"/ Writing directly to this pipe isn't recommended, because it's not","span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":7408,"byte_end":7477,"line_start":203,"line_end":203,"column_start":1,"column_end":70}},{"value":"/ synchronized with [`std::io::stderr`]. [`PipeWriter`] implements","span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":7478,"byte_end":7546,"line_start":204,"line_end":204,"column_start":1,"column_end":69}},{"value":"/ [`Into<Stdio>`], so it can be passed directly to [`Command::stdout`] or","span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":7547,"byte_end":7622,"line_start":205,"line_end":205,"column_start":1,"column_end":76}},{"value":"/ [`Command::stderr`]. This can be useful if you want the child's stdout to go","span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":7623,"byte_end":7703,"line_start":206,"line_end":206,"column_start":1,"column_end":81}},{"value":"/ to the parent's stderr.","span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":7704,"byte_end":7731,"line_start":207,"line_end":207,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":7732,"byte_end":7735,"line_start":208,"line_end":208,"column_start":1,"column_end":4}},{"value":"/ [`std::io::stderr`]: https://doc.rust-lang.org/std/io/fn.stderr.html","span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":7736,"byte_end":7808,"line_start":209,"line_end":209,"column_start":1,"column_end":73}},{"value":"/ [`PipeWriter`]: struct.PipeWriter.html","span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":7809,"byte_end":7851,"line_start":210,"line_end":210,"column_start":1,"column_end":43}},{"value":"/ [`Into<Stdio>`]: https://doc.rust-lang.org/std/process/struct.Stdio.html","span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":7852,"byte_end":7928,"line_start":211,"line_end":211,"column_start":1,"column_end":77}},{"value":"/ [`Command::stdout`]: https://doc.rust-lang.org/std/process/struct.Command.html#method.stdout","span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":7929,"byte_end":8025,"line_start":212,"line_end":212,"column_start":1,"column_end":97}},{"value":"/ [`Command::stderr`]: https://doc.rust-lang.org/std/process/struct.Command.html#method.stderr","span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":8026,"byte_end":8122,"line_start":213,"line_end":213,"column_start":1,"column_end":97}},{"value":"/ [`Stdio::inherit`]: https://doc.rust-lang.org/std/process/struct.Stdio.html#method.inherit","span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":8123,"byte_end":8217,"line_start":214,"line_end":214,"column_start":1,"column_end":95}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":3035,"byte_end":3045,"line_start":78,"line_end":78,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":13}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":3288,"byte_end":3298,"line_start":86,"line_end":86,"column_start":19,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":15}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":3596,"byte_end":3601,"line_start":99,"line_end":99,"column_start":27,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":20}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":3970,"byte_end":3980,"line_start":113,"line_end":113,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":22}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":4224,"byte_end":4234,"line_start":121,"line_end":121,"column_start":20,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":24},{"krate":0,"index":25}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":4715,"byte_end":4720,"line_start":143,"line_end":143,"column_start":27,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":31}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/unix.rs","byte_start":18215,"byte_end":18225,"line_start":58,"line_end":58,"column_start":20,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":63}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/unix.rs","byte_start":18319,"byte_end":18329,"line_start":64,"line_end":64,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":65}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/unix.rs","byte_start":18422,"byte_end":18432,"line_start":70,"line_end":70,"column_start":20,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":67}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/unix.rs","byte_start":18558,"byte_end":18568,"line_start":76,"line_end":76,"column_start":20,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":69}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/unix.rs","byte_start":18662,"byte_end":18672,"line_start":82,"line_end":82,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":71}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/unix.rs","byte_start":18765,"byte_end":18775,"line_start":88,"line_end":88,"column_start":20,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":73}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":3035,"byte_end":3045,"line_start":78,"line_end":78,"column_start":6,"column_end":16},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":74},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":3288,"byte_end":3298,"line_start":86,"line_end":86,"column_start":19,"column_end":29},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":74},"to":{"krate":1,"index":4402}},{"span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":3596,"byte_end":3601,"line_start":99,"line_end":99,"column_start":27,"column_end":32},"kind":{"Impl":{"id":2}},"from":{"krate":1,"index":7463},"to":{"krate":2,"index":2925}},{"span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":3970,"byte_end":3980,"line_start":113,"line_end":113,"column_start":6,"column_end":16},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":79},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":4224,"byte_end":4234,"line_start":121,"line_end":121,"column_start":20,"column_end":30},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":79},"to":{"krate":1,"index":4459}},{"span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/lib.rs","byte_start":4715,"byte_end":4720,"line_start":143,"line_end":143,"column_start":27,"column_end":32},"kind":{"Impl":{"id":5}},"from":{"krate":1,"index":7463},"to":{"krate":2,"index":2925}},{"span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/unix.rs","byte_start":18215,"byte_end":18225,"line_start":58,"line_end":58,"column_start":20,"column_end":30},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":74},"to":{"krate":1,"index":6647}},{"span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/unix.rs","byte_start":18319,"byte_end":18329,"line_start":64,"line_end":64,"column_start":18,"column_end":28},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":74},"to":{"krate":1,"index":6643}},{"span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/unix.rs","byte_start":18422,"byte_end":18432,"line_start":70,"line_end":70,"column_start":20,"column_end":30},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":74},"to":{"krate":1,"index":6645}},{"span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/unix.rs","byte_start":18558,"byte_end":18568,"line_start":76,"line_end":76,"column_start":20,"column_end":30},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":79},"to":{"krate":1,"index":6647}},{"span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/unix.rs","byte_start":18662,"byte_end":18672,"line_start":82,"line_end":82,"column_start":18,"column_end":28},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":79},"to":{"krate":1,"index":6643}},{"span":{"file_name":"/home/zero/.cargo/registry/src/github.com-1ecc6299db9ec823/os_pipe-0.9.2/src/unix.rs","byte_start":18765,"byte_end":18775,"line_start":88,"line_end":88,"column_start":20,"column_end":30},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":79},"to":{"krate":1,"index":6645}}]}